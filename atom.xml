<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jerilee.github.io</id>
    <title>Jeri的博客</title>
    <updated>2020-07-12T01:30:53.308Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jerilee.github.io"/>
    <link rel="self" href="https://jerilee.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jerilee.github.io/images/avatar.png</logo>
    <icon>https://jerilee.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jeri的博客</rights>
    <entry>
        <title type="html"><![CDATA[基础算法]]></title>
        <id>https://jerilee.github.io/post/ji-chu-suan-fa/</id>
        <link href="https://jerilee.github.io/post/ji-chu-suan-fa/">
        </link>
        <updated>2020-07-11T15:14:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基础算法">基础算法</h1>
<p>@(算法)[KMP|Manacher|Huffman]</p>
<hr>
<h2 id="kmp">KMP</h2>
<h3 id="原理">原理</h3>
<h2 id="manacher算法">Manacher算法</h2>
<h2 id="huffman树">huffman树</h2>
<h2 id="lis算法">LIS算法</h2>
<h2 id="动态规划">动态规划</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基础数据结构（线段树，堆）]]></title>
        <id>https://jerilee.github.io/post/ji-chu-shu-ju-jie-gou/</id>
        <link href="https://jerilee.github.io/post/ji-chu-shu-ju-jie-gou/">
        </link>
        <updated>2020-07-11T15:05:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基础数据结构">基础数据结构</h1>
<p>@(数据结构)[线段树|堆|数据结构]</p>
<hr>
<p>[TOC]</p>
<h2 id="线段树segment-tree">线段树（Segment Tree）</h2>
<h3 id="原理">原理</h3>
<p>线段树属于二叉树，除叶节点外，其他节点的度都是2。<br>
线段树特性 ： 父节点的值为子节点值的和，便于求区间和。如图，5号节点，它的v值为10号节点和11号节点的和。<br>
<img src="https://jerilee.github.io/post-images/1594517169989.png" alt="" loading="lazy"></p>
<p>备注：线段树有多种形式，父节点也可以为两个子节点的最大值/最小值等。</p>
<p>如图，以<strong>下文C#引用实现</strong>为例，每个节点的value代表一个区间[left, right)的和，若一个元素代表[left, right)的和，那它的两个儿子分别代表[left, mid), [mid, right) 的和。<br>
<img src="https://jerilee.github.io/post-images/1594514907199.png" alt="" loading="lazy"></p>
<h3 id="code">Code</h3>
<h4 id="c代码"><strong>C++代码</strong></h4>
<h4 id="c代码-数组实现这是一棵满二叉树"><strong>C#代码</strong> 数组实现，这是一棵满二叉树</h4>
<pre><code class="language-C#">  public class SegmentTree&lt;T&gt; where T : new() {
    T[] list;
    int Count;
    Func&lt;T, T, T&gt; addFunc;
    /// &lt;summary&gt;
    /// 构造函数
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;collection&quot;&gt; 数据集合&lt;/param&gt;
    /// &lt;param name=&quot;func&quot;&gt; 两个T相加方法&lt;/param&gt;
    public SegmentTree(List&lt;T&gt; collection, Func&lt;T,T,T&gt; func) {
      if(collection.Count &gt; 0) {
        int temp = 1;
        while(temp &lt; collection.Count) {
          temp &lt;&lt;= 1;
        }
        Count = temp;
        list = new T[temp &lt;&lt; 1];
        addFunc = func;
        BuildTree(1, 0, temp, collection);
      } else {
        throw new Exception(&quot;List Count is Zero&quot;);
      }
    }

    private void BuildTree(int nodeId, int left, int right, List&lt;T&gt; collection) {
      if(left + 1 == right) {
        if(left &lt; collection.Count) {
          list[nodeId] = collection[left];
        } else {
          list[nodeId] = new T();
        }
        return;
      }

      int mid = (left + right) &gt;&gt; 1;
      BuildTree(nodeId &lt;&lt; 1, left, mid, collection);
      BuildTree(nodeId &lt;&lt; 1 | 1, mid, right, collection);
      list[nodeId] = addFunc(list[nodeId &lt;&lt; 1], list[nodeId &lt;&lt; 1 | 1]);
    }
    /// &lt;summary&gt;
    /// 设置值
    /// &lt;/summary&gt;
    public bool TrySetValue(int index, T value) {
      if (index &gt;= 0 &amp;&amp; index &lt; Count) {
        SetValue(1, 0, Count, index, value);
        return true;
      }
      return false;
    }

    private void SetValue(int nodeId, int left, int right, int index, T value) {
      if(left + 1 == right) {
        list[nodeId] = value;
        return;
      }
      int mid = (left + right) &gt;&gt; 1;
      if(index &lt; mid) {
        SetValue(nodeId &lt;&lt; 1, left, mid, index, value);
      } else {
        SetValue(nodeId &lt;&lt; 1 | 1, mid, right, index, value);
      }
      list[nodeId] = addFunc(list[nodeId &lt;&lt; 1], list[nodeId &lt;&lt; 1 | 1]);
    }
    /// &lt;summary&gt;
    /// 查询区间和
    /// &lt;/summary&gt;
    public T QueryValue(int left, int right) {
      if(left &lt; right &amp;&amp; left &gt;= 0 &amp;&amp; right &lt;= Count) {
        return QueryValue(1, 0, Count, left, right);
      }
      return default(T);
    }

    private T QueryValue(int nodeId, int left, int right, int qleft, int qright) {
      if(left == qleft &amp;&amp; right == qright) {
        return list[nodeId];
      }

      int mid = (left + right) &gt;&gt; 1;
      if(qright &lt;= mid) {
        return QueryValue(nodeId &lt;&lt; 1, left, mid, qleft, qright);
      }else if(qleft &gt;= mid) {
        return QueryValue(nodeId &lt;&lt; 1 | 1, mid, right, qleft, qright);
      } else {
        return addFunc(QueryValue(nodeId &lt;&lt; 1, left, mid, qleft, mid),
          QueryValue(nodeId &lt;&lt; 1 | 1, mid, right, mid, qright));
      }
    }
  }
</code></pre>
<h4 id="c代码-引用实现这不是满二叉树"><strong>C#代码</strong> 引用实现，这不是满二叉树</h4>
<pre><code class="language-C#">  public class SegmentTree2&lt;T&gt; where T : new() {
    private class Node {
      public int Left, Right;
      public Node LeftSon, RightSon;
      public T Value;
    }
    private Node root;
    Func&lt;T, T, T&gt; addFunc;
    /// &lt;summary&gt;
    /// 构造函数
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;collection&quot;&gt; 数据集合&lt;/param&gt;
    /// &lt;param name=&quot;func&quot;&gt; 两个T相加方法&lt;/param&gt;
    public SegmentTree2(List&lt;T&gt; collection, Func&lt;T, T, T&gt; func) {
      if (collection.Count &gt; 0) {
        addFunc = func;
        root = BuildTree(0, collection.Count, collection);
      } else {
        throw new Exception(&quot;List Count is Zero&quot;);
      }
    }

    private Node BuildTree(int left, int right, List&lt;T&gt; collection) {
      Node node = new Node {
        Left = left,
        Right = right
      };
      if (left + 1 == right) {
        node.LeftSon = node.RightSon = default;
        node.Value = collection[left];
      } else {
        int mid = (left + right) &gt;&gt; 1;
        node.LeftSon = BuildTree(left, mid, collection);
        node.RightSon = BuildTree(mid, right, collection);
        node.Value = addFunc(node.LeftSon.Value, node.RightSon.Value);
      }
      return node;
    }
    /// &lt;summary&gt;
    /// 设置值
    /// &lt;/summary&gt;
    public bool TrySetValue(int index, T value) {
      if (index &gt;= root.Left &amp;&amp; index &lt; root.Right) {
        SetValue(root, index, value);
        return true;
      }
      return false;
    }

    private void SetValue(Node node, int index, T value) {
      if (node.Left + 1 == node.Right) {
        node.Value = value;
      } else {
        SetValue(index &lt; node.LeftSon.Right ? node.LeftSon : node.RightSon, index, value);
        node.Value = addFunc(node.LeftSon.Value, node.RightSon.Value);
      }
    }
    /// &lt;summary&gt;
    /// 查询区间和
    /// &lt;/summary&gt;
    public T QueryValue(int left, int right) {
      if (left &lt; right &amp;&amp; left &gt;= root.Left &amp;&amp; right &lt;= root.Right) {
        return QueryValue(root, left, right);
      }
      return default(T);
    }

    private T QueryValue(Node node, int qleft, int qright) {
      if (node.Left == qleft &amp;&amp; node.Right == qright) {
        return node.Value;
      }

      if (qright &lt;= node.LeftSon.Right) {
        return QueryValue(node.LeftSon, qleft, qright);
      } else if (qleft &gt;= node.LeftSon.Right) {
        return QueryValue(node.RightSon, qleft, qright);
      } else {
        return addFunc(QueryValue(node.LeftSon, qleft, node.LeftSon.Right),
          QueryValue(node.RightSon, node.RightSon.Left, qright));
      }
    }
  }
</code></pre>
<hr>
<h2 id="堆">堆</h2>
<h3 id="原理-2">原理</h3>
<p>堆属于二叉树，属于完全二叉树。<br>
堆特性 ： 以大顶堆为例，父节点比两个子节点的值都要大。如图，5号节点，它的v值比10号节点和11号节点都要大。<br>
实现方式： 通常采用数组实现。<br>
<img src="https://jerilee.github.io/post-images/1594513997324.png" alt="" loading="lazy"></p>
<h3 id="code-2">Code</h3>
<h4 id="c代码-2">C#代码</h4>
<pre><code class="language-C#">
  public class Heap&lt;T&gt; where T: IComparable&lt;T&gt; {
    private List&lt;T&gt; list = new List&lt;T&gt;();
    private int count = 0;

    public Heap() {
    }

    public void Add(T value) {
      if(list.Count &gt; count) {
        list[count] = value;
      } else {
        list.Add(value);
      }

      CheckAdd(count);
      ++count;
    }

    private void CheckAdd(int index) {
      if(index &gt; 0) {
        int father = (index - 1 ) &gt;&gt; 1;
        if (list[index].CompareTo(list[father]) &lt; 0) {
          T temp = list[index];
          list[index] = list[father];
          list[father] = temp;
          CheckAdd(father);
        }
      }
    }

    public T Top() {
      if(count &gt; 0) {
        return list[0];
      }
      return default;
    }

    public int Count =&gt; count;
    public bool IsEmpty =&gt; count == 0;

    public bool Pop() {
      if(count &gt; 0) {
        --count;
        if (count &gt; 0) {
          T temp = list[0];
          list[0] = list[count];
          list[count] = temp;
          CheckPop(0);
        }
        return true;
      }
      return false;
    }

    private void CheckPop(int index) {
      int leftSon = index &lt;&lt; 1 | 1;
      int rightSon = leftSon + 1;
      if (leftSon &lt; Count) {
        int upSon = rightSon &lt; Count &amp;&amp; list[rightSon].CompareTo(list[leftSon]) &lt; 0 ? rightSon : leftSon;
        if (list[upSon].CompareTo(list[index]) &lt; 0) {
          T temp = list[index];
          list[index] = list[upSon];
          list[upSon] = temp;
          CheckPop(upSon);
        }
      }
    }
  }

</code></pre>
]]></content>
    </entry>
</feed>